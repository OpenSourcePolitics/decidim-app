name: "CI/CD"
on: [push]

env:
  CI: "true"
  SIMPLECOV: "true"
  RUBY_VERSION: 2.7.5
  RAILS_ENV: test
  NODE_VERSION: 16.9.1
  RUBYOPT: '-W:no-deprecated'

jobs:
  todo:
    name: TODO
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: "TODO to Issue"
        uses: "alstr/todo-to-issue-action@v4"
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    if: "!startsWith(github.head_ref, 'chore/l10n')"
    timeout-minutes: 60
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.3.0
        if: "github.ref != 'refs/heads/develop'"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install JS dependencies
        run: npm ci
      - run: bundle exec rubocop -P
        name: Lint Ruby files
  tests:
    strategy:
      matrix:
        slice: [ "0-2", "1-2" ]
    name: Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_PASSWORD: postgres
    env:
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_HOST: localhost
      RAILS_ENV: test
      # Set locales available for i18n tasks
      ENFORCED_LOCALES: "en,fr"
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.2.2
        if: "github.ref != 'refs/heads/master' || github.ref != 'refs/heads/develop'"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dependencies
        run: yarn install --prefer-offline --frozen-lockfile
      - name: Create db
        run: |
          bundle exec rails parallel:create parallel:migrate
      - name: Register cache hash
        id: cache-hash
        run: |
          echo "::set-output name=hash::$(bundle exec rake test:assets_hash)"
      - name: asset cache
        uses: actions/cache@v3
        with:
          path: |
            public/packs-test
            tmp/webpacker-cache
          key: asset-cache-${{ runner.os }}-${{ steps.cache-hash.outputs.hash }}
      - name: Precompile assets
        run: |
          bundle exec rake assets:precompile
      - run: mkdir -p ./spec/tmp/screenshots
        name: Create the screenshots folder
      - uses: nanasess/setup-chromedriver@v1.0.1
      - run:  bundle exec rake "test:run[exclude, spec/system/**/*_spec.rb, ${{ matrix.slice }}]"
        name: RSpec
      - run: ./.github/upload_coverage.sh decidim-app $GITHUB_EVENT_PATH
        name: Upload coverage
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: screenshots
          path: ./spec/tmp/screenshots
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: assets-manifest-${{ matrix.slice }}
          path: ./tmp/assets_manifest.json
  system_tests:
    strategy:
      matrix:
        slice: [ "0-4", "1-4", "2-4", "3-4" ]
    name: System tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_PASSWORD: postgres
    env:
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_HOST: localhost
      RAILS_ENV: test
      # Set locales available for i18n tasks
      ENFORCED_LOCALES: "en,fr"
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.2.2
        if: "github.ref != 'refs/heads/master' || github.ref != 'refs/heads/develop'"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dependencies
        run: yarn install --prefer-offline --frozen-lockfile
      - name: Create db
        run: |
          bundle exec rails parallel:create parallel:migrate
      - name: Register cache hash
        id: cache-hash
        run: |
          echo "::set-output name=hash::$(bundle exec rake test:assets_hash)"
      - name: asset cache
        uses: actions/cache@v3
        with:
          path: |
            public/packs-test
            tmp/webpacker-cache
          key: asset-cache-${{ runner.os }}-${{ steps.cache-hash.outputs.hash }}
      - name: Precompile assets
        run: |
          bundle exec rake assets:precompile
      - run: mkdir -p ./spec/tmp/screenshots
        name: Create the screenshots folder
      - uses: nanasess/setup-chromedriver@v1.0.1
      - run:  bundle exec rake "test:run[include, spec/system/**/*_spec.rb, ${{ matrix.slice }}]"
        name: RSpec
      - run: ./.github/upload_coverage.sh decidim-app $GITHUB_EVENT_PATH
        name: Upload coverage
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: screenshots
          path: ./spec/tmp/screenshots
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: assets-manifest-${{ matrix.slice }}
          path: ./tmp/assets_manifest.json
  test_build:
    name: Test build docker image
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_PASSWORD: postgres
    env:
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_HOST: host.docker.internal
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Scaleway registry
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.REGISTRY }}
          username: userdoesnotmatter
          password: ${{ secrets.TOKEN }}
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ vars.IMAGE_NAME }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ vars.IMAGE_NAME }}
      - name: Build image
        uses: docker/build-push-action@v3
        with:
          cache-from: type=local,src=/tmp/.buildx-cache,mode=max
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          outputs: type=docker,compression=gzip
          tags: ${{ vars.IMAGE_NAME }}:develop
      - name: Test build
        run: |
          docker run --rm --add-host=host.docker.internal:host-gateway -d -e DATABASE_USERNAME=${{env.DATABASE_USERNAME}} -e DATABASE_PASSWORD=${{env.DATABASE_PASSWORD}} -e DATABASE_HOST=${{env.DATABASE_HOST}} -p 3000:3000 --name decidim-app ${{ vars.IMAGE_NAME }}:develop
          docker exec decidim-app bundle exec rake db:create db:migrate
          ./.github/test_build.sh
  deploy_develop:
    if: "github.ref == 'refs/heads/develop'"
    needs: [lint, tests, system_tests, test_build]
    name: Deploy develop branch on develop instance
    runs-on: ubuntu-latest
    steps:
      - name: Run Ansible playbook
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.ANSIBLE_HOST }}
          username: ${{ secrets.ANSIBLE_USERNAME }}
          key: ${{ secrets.ANSIBLE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: ansible-playbook -u ${{ secrets.ANSIBLE_USERNAME }} --private-key="~/.ssh/ansible-deploy/ansible-deploy" -i /home/${{ secrets.ANSIBLE_USERNAME }}/ansible/decidim/inventories/develop.yml /home/${{ secrets.ANSIBLE_USERNAME }}/ansible/decidim/playbooks/update_decidim_app.yml
  deploy_rc:
    if: "github.ref == 'refs/heads/rc'"
    needs: [lint, tests, system_tests, test_build]
    name: Deploy rc branch on RC instance
    runs-on: ubuntu-latest
    steps:
      - name: Run Ansible playbook
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.ANSIBLE_HOST }}
          username: ${{ secrets.ANSIBLE_USERNAME }}
          key: ${{ secrets.ANSIBLE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: ansible-playbook -u ${{ secrets.ANSIBLE_USERNAME }} --private-key="~/.ssh/ansible-deploy/ansible-deploy" -i /home/${{ secrets.ANSIBLE_USERNAME }}/ansible/decidim/inventories/rc.yml /home/${{ secrets.ANSIBLE_USERNAME }}/ansible/decidim/playbooks/update_decidim_app.yml
  deploy_staging:
    if: "github.ref == 'refs/heads/master'"
    needs: [lint, tests, system_tests, test_build]
    name: Deploy staging branch on staging instance
    runs-on: ubuntu-latest
    steps:
      - name: Run Ansible playbook
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.ANSIBLE_HOST }}
          username: ${{ secrets.ANSIBLE_USERNAME }}
          key: ${{ secrets.ANSIBLE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: ansible-playbook -u ${{ secrets.ANSIBLE_USERNAME }} --private-key="~/.ssh/ansible-deploy/ansible-deploy" -i /home/${{ secrets.ANSIBLE_USERNAME }}/ansible/decidim/inventories/staging.yml /home/${{ secrets.ANSIBLE_USERNAME }}/ansible/decidim/playbooks/update_decidim_app.yml
  build_and_push_image:
    name: Build and push image to Registry
    if: "github.ref == 'refs/heads/develop'"
    needs: [lint, tests, system_tests, test_build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Scaleway registry
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.REGISTRY }}
          username: userdoesnotmatter
          password: ${{ secrets.TOKEN }}
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ vars.IMAGE_NAME }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ vars.IMAGE_NAME }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          cache-from: type=local,src=/tmp/.buildx-cache,mode=max
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          push: true
          tags: ${{ vars.IMAGE_NAME }}:develop