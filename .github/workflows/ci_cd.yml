name: "CI/CD"
on: [push]

env:
  RSPEC_FORMAT: "documentation"
  RUBY_VERSION: 3.2.2
  RAILS_ENV: test
  NODE_ENV: test
  NODE_VERSION: 18.17.1
  AVAILABLE_LOCALES: "en,fr,ca,es"

jobs:
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.3.0
        if: "github.ref != 'refs/heads/develop'"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - uses: OpenSourcePolitics/lint-action@master
        with:
          ruby_version: ${{ env.RUBY_VERSION }}
          node_version: ${{ env.NODE_VERSION }}
  sast:
    name: Bundler Audit
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
      - name: Bundler Audit
        run: |
          bundle exec rake bundle:audit
  zeitwerk:
    name: Check for Zeitwerk errors
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
      - name: Check for Zeitwerk errors
        run: |
          bundle exec rails zeitwerk:check
  tests:
    strategy:
      fail-fast: false
      matrix:
        slice: [ "0-2", "1-2" ]
    name: Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_PASSWORD: postgres
    env:
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_HOST: localhost
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.2.2
        if: "github.ref != 'refs/heads/main' || github.ref != 'refs/heads/develop'"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
      - run: |
          sudo apt update
          sudo apt install -y libu2f-udev
          sudo apt install -y --fix-missing imagemagick
        name: Install dependencies
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./package-lock.json
      - name: Create test app and configure databases
        run: |
          bundle exec rake test:setup
          bundle exec rake parallel:create
          bundle exec rake parallel:prepare
        shell: "bash"
      - name: Create the screenshots folder
        run: mkdir -p ./spec/decidim_dummy_app/tmp/screenshots
        shell: "bash"
      - name: Install JS dependencies
        run: npm install
        working-directory: ./spec/decidim_dummy_app/
        shell: "bash"
        env:
          NODE_ENV: test
      - name: Precompile assets
        run: bundle exec rails shakapacker:compile
        working-directory: ./spec/decidim_dummy_app/
        shell: "bash"
        env:
          NODE_ENV: test
      - name: Run unit tests
        run: PARALLEL_TEST_PROCESSORS=2 PARALLEL_TEST_GROUPS=${{ matrix.slice }} bundle exec parallel_test --type rspec --pattern spec/ --exclude-pattern spec/system
  system_tests:
    strategy:
      fail-fast: false
      matrix:
        slice: [ "0-4", "1-4", "2-4", "3-4" ]
    name: System tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_PASSWORD: postgres
    env:
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_HOST: localhost
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.2.2
        if: "github.ref != 'refs/heads/main' || github.ref != 'refs/heads/develop'"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
      - run: |
          sudo apt update
          sudo apt install -y libu2f-udev
          sudo apt install -y --fix-missing imagemagick
        name: Install dependencies
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./package-lock.json
      - name: Create test app and configure databases
        run: |
          bundle exec rake test:setup
          bundle exec rake parallel:create
          bundle exec rake parallel:prepare
        shell: "bash"
      - name: Create the screenshots folder
        run: mkdir -p ./spec/decidim_dummy_app/tmp/screenshots
        shell: "bash"
      - name: Install JS dependencies
        run: npm install
        working-directory: ./spec/decidim_dummy_app/
        shell: "bash"
        env:
          NODE_ENV: test
      - name: Precompile assets
        run: bundle exec rails shakapacker:compile
        working-directory: ./spec/decidim_dummy_app/
        shell: "bash"
        env:
          NODE_ENV: test
      - name: Run system tests
        run: PARALLEL_TEST_PROCESSORS=4 PARALLEL_TEST_GROUPS=${{ matrix.slice }} bundle exec parallel_test --type rspec --pattern spec/system --exclude-pattern spec/system/admin
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: screenshots
          path: ./spec/decidim_dummy_app/tmp/screenshots

  docker_build:
    name: Test build docker image
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_PASSWORD: postgres
    env:
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_HOST: host.docker.internal
    steps:
      - uses: OpenSourcePolitics/build-and-test-images-action@master
        with:
          registry: ${{ vars.REGISTRY_ENDPOINT }}
          namespace: ${{ vars.REGISTRY_NAMESPACE }}
          image_name: ${{ vars.IMAGE_NAME }}
          tag: ${{ github.ref }}
          password: ${{ secrets.TOKEN }}
          database_username: ${{ env.DATABASE_USERNAME }}
          database_password: ${{ env.DATABASE_PASSWORD }}
          database_host: ${{ env.DATABASE_HOST }}
          push: "true"
  generate_release:
    name: Generate release
    needs: [lint, sast, zeitwerk, tests, system_tests, docker_build]
    if: "github.ref == 'refs/heads/main'"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: mathieudutour/github-tag-action@v6.1
        name: Bump version and push tag
        id: tag_version
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: ncipollo/release-action@v1
        name: Create a GitHub release
        with:
          generateReleaseNotes: true
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
