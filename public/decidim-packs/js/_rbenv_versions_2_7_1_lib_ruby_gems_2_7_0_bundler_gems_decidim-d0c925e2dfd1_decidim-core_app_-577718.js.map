{"version":3,"file":"js/_rbenv_versions_2_7_1_lib_ruby_gems_2_7_0_bundler_gems_decidim-d0c925e2dfd1_decidim-core_app_-577718.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;;AACA;AACA;;;;AAEA;AAAA;;AACA;AACA;AADA;AAGA;AACA;AACA;;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAEA;;AAEA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;AAEA;AAAA;;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAEA;;AACA;;AACA;AALA;;AAOA;AACA;;AAEA;;AACA;;AACA;AALA;;AAQA;AACA;AADA;AAhBA;AAoBA;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AAGA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AACA;AAMA;AANA;AAQA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AA5BA;AA+BA;AAjDA;;AAmDA;AACA;AACA;AACA;AAHA;;AAKA;AACA;;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAVA;;AAYA;AACA;AACA;;AACA;AACA;AACA;;AAEA;AACA;AAPA;AADA;;AAYA;AACA;AADA;AAOA;AACA;AADA;AAGA;AACA;AADA;AAKA;AACA;AACA;;AACA;AACA;AACA;AADA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtKA;;;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;;AAIA;AACA;AACA;AAAA;AAFA;AAOA;AAIA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAFA;AASA;AACA;AAXA;;AAcA;AACA;AACA;;AAEA;AACA;AAGA;;AACA;AACA;AADA;AAGA;;AAEA;AACA;AADA;AAGA;AACA;AA1DA;;AA6DA;AAEA;AACA;;;;;;;;;;;;;ACtEA;AAEA;AACA;;AAGA;AACA;AACA;AAFA;AAJA","sources":["webpack://app/../../../.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/bundler/gems/decidim-d0c925e2dfd1/decidim-core/app/packs/src/decidim/configuration.js","webpack://app/../../../.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/bundler/gems/decidim-d0c925e2dfd1/decidim-core/app/packs/src/decidim/confirm.js","webpack://app/../../../.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/bundler/gems/decidim-d0c925e2dfd1/decidim-core/app/packs/src/decidim/editor.js","webpack://app/../../../.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/bundler/gems/decidim-d0c925e2dfd1/decidim-core/app/packs/src/decidim/input_tags.js"],"sourcesContent":["export default class Configuration {\n  constructor() {\n    this.config = {};\n  }\n\n  set(key, value = null) {\n    if (typeof key === \"object\") {\n      this.config = { ...this.config, ...key };\n    } else {\n      this.config[key] = value;\n    }\n  }\n\n  get(key) {\n    return this.config[key];\n  }\n}\n","/**\n * A custom confirm dialog for Decidim based on Foundation reveals.\n *\n * Note that this needs to be loaded before the application JS in order for\n * it to gain control over the confirm events BEFORE rails-ujs is loaded.\n */\n\nimport Rails from \"@rails/ujs\"\n\nlet TEMPLATE_HTML = null;\n\nclass ConfirmDialog {\n  constructor(sourceElement) {\n    this.$modal = $(TEMPLATE_HTML);\n    this.$source = sourceElement;\n    this.$content = $(\".confirm-modal-content\", this.$modal);\n    this.$buttonConfirm = $(\"[data-confirm-ok]\", this.$modal);\n    this.$buttonCancel = $(\"[data-confirm-cancel]\", this.$modal);\n\n    // Avoid duplicate IDs and append the new modal to the body\n    const titleId = `confirm-modal-title-${Math.random().toString(36).substring(7)}`;\n\n    this.$modal.removeAttr(\"id\");\n    $(\"#confirm-modal-title\", this.$modal).attr(\"id\", titleId);\n    this.$modal.attr(\"aria-labelledby\", titleId);\n\n    $(\"body\").append(this.$modal);\n    this.$modal.foundation();\n  }\n\n  confirm(message) {\n    this.$content.html(message);\n\n    this.$buttonConfirm.off(\"click\");\n    this.$buttonCancel.off(\"click\");\n\n    return new Promise((resolve) => {\n      this.$buttonConfirm.on(\"click\", (ev) => {\n        ev.preventDefault();\n\n        this.$modal.foundation(\"close\");\n        resolve(true);\n        this.$source.focus();\n      });\n      this.$buttonCancel.on(\"click\", (ev) => {\n        ev.preventDefault();\n\n        this.$modal.foundation(\"close\");\n        resolve(false);\n        this.$source.focus();\n      });\n\n      this.$modal.foundation(\"open\").on(\"closed.zf.reveal\", () => {\n        this.$modal.remove();\n      });\n    });\n  }\n}\n\n// Override the default confirm dialog by Rails\n// See:\n// https://github.com/rails/rails/blob/fba1064153d8e2f4654df7762a7d3664b93e9fc8/actionview/app/assets/javascripts/rails-ujs/features/confirm.coffee\n//\n// There is apparently a better way coming in Rails 6:\n// https://github.com/rails/rails/commit/e9aa7ecdee0aa7bb4dcfa5046881bde2f1fe21cc#diff-e1aaa45200e9adcbcb8baf1c5375b5d1\n//\n// The old approach is broken according to https://github.com/rails/rails/issues/36686#issuecomment-514213323\n// so for the moment this needs to be executed **before** Rails.start()\nconst allowAction = (ev, element) => {\n  const message = $(element).data(\"confirm\");\n  if (!message) {\n    return true;\n  }\n\n  if (!Rails.fire(element, \"confirm\")) {\n    return false;\n  }\n\n  if (TEMPLATE_HTML === null) {\n    TEMPLATE_HTML = $(\"#confirm-modal\")[0].outerHTML;\n    $(\"#confirm-modal\").remove();\n  }\n\n  const dialog = new ConfirmDialog(\n    $(element)\n  );\n  dialog.confirm(message).then((answer) => {\n    const completed = Rails.fire(element, \"confirm:complete\", [answer]);\n    if (answer && completed) {\n      // Allow the event to propagate normally and re-dispatch it without\n      // the confirm data attribute which the Rails internal method is\n      // checking.\n      $(element).data(\"confirm\", null);\n      $(element).removeAttr(\"data-confirm\");\n\n      // The submit button click events won't do anything if they are\n      // dispatched as is. In these cases, just submit the underlying form.\n      if (ev.type === \"click\" &&\n        (\n          $(element).is('button[type=\"submit\"]') ||\n          $(element).is('input[type=\"submit\"]')\n        )\n      ) {\n        $(element).parents(\"form\").submit();\n      } else {\n        let origEv = ev.originalEvent || ev;\n        let newEv = origEv;\n        if (typeof Event === \"function\") {\n          // Clone the event because otherwise some click events may not\n          // work properly when re-dispatched.\n          newEv = new origEv.constructor(origEv.type, origEv);\n        }\n        ev.target.dispatchEvent(newEv);\n      }\n    }\n  });\n\n  return false;\n};\nconst handleConfirm = (ev, element) => {\n  if (!allowAction(ev, element)) {\n    Rails.stopEverything(ev);\n  }\n};\nconst getMatchingEventTarget = (ev, selector) => {\n  let target = ev.target;\n  while (!(!(target instanceof Element) || Rails.matches(target, selector))) {\n    target = target.parentNode;\n  }\n\n  if (target instanceof Element) {\n    return target;\n  }\n\n  return null;\n};\nconst handleDocumentEvent = (ev, matchSelectors) => {\n  return matchSelectors.some((currentSelector) => {\n    let target = getMatchingEventTarget(ev, currentSelector);\n    if (target === null) {\n      return false;\n    }\n\n    handleConfirm(ev, target);\n    return true;\n  });\n};\n\ndocument.addEventListener(\"click\", (ev) => {\n  return handleDocumentEvent(ev, [\n    Rails.linkClickSelector,\n    Rails.buttonClickSelector,\n    Rails.formInputClickSelector\n  ]);\n});\ndocument.addEventListener(\"change\", (ev) => {\n  return handleDocumentEvent(ev, [Rails.inputChangeSelector]);\n});\ndocument.addEventListener(\"submit\", (ev) => {\n  return handleDocumentEvent(ev, [Rails.formSubmitSelector]);\n});\n\n// This is needed for the confirm dialog to work with Foundation Abide.\n// Abide registers its own submit click listeners since Foundation 5.6.x\n// which will be handled before the document listeners above. This would\n// break the custom confirm functionality when used with Foundation Abide.\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  $(Rails.formInputClickSelector).on(\"click.confirm\", (ev) => {\n    handleConfirm(ev, getMatchingEventTarget(ev, Rails.formInputClickSelector));\n  });\n});\n","/* eslint-disable require-jsdoc */\n\nimport lineBreakButtonHandler from \"src/decidim/editor/linebreak_module\"\n\nconst quillFormats = [\"bold\", \"italic\", \"link\", \"underline\", \"header\", \"list\", \"video\", \"image\", \"alt\", \"break\"];\n\nexport default function createQuillEditor(container) {\n  const toolbar = $(container).data(\"toolbar\");\n  const disabled = $(container).data(\"disabled\");\n\n  let quillToolbar = [\n    [\"bold\", \"italic\", \"underline\", \"linebreak\"],\n    [{ list: \"ordered\" }, { list: \"bullet\" }],\n    [\"link\", \"clean\"]\n  ];\n\n  if (toolbar === \"full\") {\n    quillToolbar = [\n      [{ header: [1, 2, 3, 4, 5, 6, false] }],\n      ...quillToolbar,\n      [\"video\"]\n    ];\n  } else if (toolbar === \"basic\") {\n    quillToolbar = [\n      ...quillToolbar,\n      [\"video\"]\n    ];\n  }\n\n  const $input = $(container).siblings('input[type=\"hidden\"]');\n  container.innerHTML = $input.val() || \"\";\n\n  const quill = new Quill(container, {\n    modules: {\n      linebreak: {},\n      toolbar: {\n        container: quillToolbar,\n        handlers: {\n          \"linebreak\": lineBreakButtonHandler\n        }\n      }\n    },\n    formats: quillFormats,\n    theme: \"snow\"\n  });\n\n  if (disabled) {\n    quill.disable();\n  }\n\n  quill.on(\"text-change\", () => {\n    const text = quill.getText();\n\n    // Triggers CustomEvent with the cursor position\n    // It is required in input_mentions.js\n    let event = new CustomEvent(\"quill-position\", {\n      detail: quill.getSelection()\n    });\n    container.dispatchEvent(event);\n\n    if (text === \"\\n\" || text === \"\\n\\n\") {\n      $input.val(\"\");\n    } else {\n      $input.val(quill.root.innerHTML);\n    }\n  });\n  // After editor is ready, linebreak_module deletes two extraneous new lines\n  quill.emitter.emit(\"editor-ready\");\n\n  return quill;\n}\n\n","import \"bootstrap-tagsinput\"\n\n$(() => {\n  const $tagContainer = $(\".js-tags-container\");\n\n  // Initialize\n  $tagContainer.tagsinput({\n    tagClass: \"input__tag\",\n    trimValue: true\n  });\n\n});\n"],"names":[],"sourceRoot":""}