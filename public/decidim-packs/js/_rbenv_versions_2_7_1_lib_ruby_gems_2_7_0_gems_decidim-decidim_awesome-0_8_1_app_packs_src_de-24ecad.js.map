{"version":3,"file":"js/_rbenv_versions_2_7_1_lib_ruby_gems_2_7_0_gems_decidim-decidim_awesome-0_8_1_app_packs_src_de-24ecad.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;AAAA;AACA;AAAA;;AACA;AACA;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;;AAiCA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AAEA;AACA;AACA;AACA;;;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA;AACA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AALA;AAOA;;AACA;AACA;AACA;AACA;AAfA;;;AAkBA;AACA;AADA;AAGA;AACA;;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;;AAEA;AAAA;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;;AACA;AAAA;AAAA;;AACA;;AACA;AACA;AACA;;AAEA;AACA;;AACA;AACA;;AAEA;AACA;AAAA;AAJA;AAMA;AAAA;AAhBA;;AAoBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAlCA;AAqCA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AAJA;AAHA;AAYA;;;;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AATA;;AAYA;;;AAEA;AACA;AACA;;AACA;AACA;AAJA;AAOA;;;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AANA;AAQA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7MA;AACA;AACA;AACA;AACA;AACA;;;AACA;;AAGA;AACA;AACA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AATA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAnCA;AAAA;AAAA;AAqCA;AAAA;AAAA;AAAA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAOA;AAAA;;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAlEA;AAAA;AAAA;AAoEA;AACA;AAEA;AACA;;AAEA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAzFA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AAvBA;;AAAA;AAAA;;;AA6FA;AA7FA;;;;;;;;;;;;ACZA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAPA;AARA","sources":["webpack://app/../../../.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/gems/decidim-decidim_awesome-0.8.1/app/packs/src/decidim/decidim_awesome/forms/custom_fields_renderer.js","webpack://app/../../../.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/gems/decidim-decidim_awesome-0.8.1/app/packs/src/decidim/decidim_awesome/forms/rich_text_plugin.js","webpack://app/../../../.rbenv/versions/2.7.1/lib/ruby/gems/2.7.0/gems/decidim-decidim_awesome-0.8.1/app/packs/src/decidim/decidim_awesome/proposals/custom_fields.js"],"sourcesContent":["require(\"formBuilder/dist/form-render.min.js\")\nimport \"src/decidim/decidim_awesome/forms/rich_text_plugin\"\n\nexport default class CustomFieldsRenderer { // eslint-disable-line no-unused-vars\n  constructor(container_selector) {\n    this.container_selector = container_selector || \".proposal_custom_field:last\";\n    this.lang = this.getLang($(\"html\").attr(\"lang\"));\n  }\n\n  getLang(lang) {\n    const langs = {\n      // ar: 'ar-SA', // Not in decidim yet\n      \"ar\": \"ar-TN\",\n      \"ca\": \"ca-ES\",\n      \"cs\": \"cs-CZ\",\n      \"da\": \"da-DK\",\n      \"de\": \"de-DE\",\n      \"el\": \"el-GR\",\n      \"en\": \"en-US\",\n      \"es\": \"es-ES\",\n      \"fa\": \"fa-IR\",\n      \"fi\": \"fi-FI\",\n      \"fr\": \"fr-FR\",\n      \"he\": \"he-IL\",\n      \"hu\": \"hu-HU\",\n      \"it\": \"it-IT\",\n      \"ja\": \"ja-JP\",\n      \"my\": \"my-MM\",\n      \"nb\": \"nb-NO\",\n      \"nl\": \"nl-NL\",\n      \"pl\": \"pl-PL\",\n      \"pt\": \"pt-BR\",\n      \"qz\": \"qz-MM\",\n      \"ro\": \"ro-RO\",\n      \"ru\": \"ru-RU\",\n      \"sl\": \"sl-SI\",\n      \"th\": \"th-TH\",\n      \"tr\": \"tr-TR\",\n      \"uk\": \"uk-UA\",\n      \"vi\": \"vi-VN\",\n      \"zh-TW\": \"zh-TW\",\n      \"zh\": \"zh-CN\"\n    };\n    if (langs[lang]) {\n      return langs[lang];\n    }\n    if (langs[lang.substr(0, 2)]) {\n      return langs[lang.substr(0, 2)];\n    }\n    return \"en-US\";\n  }\n\n  /*\n  * Creates an XML document with a subset of html-compatible dl/dd/dt elements\n  * to store the custom fields answers\n  */\n  dataToXML(data) {\n    const $dl = $(\"<dl/>\");\n    let $dd, $div, $dt, key, l, label, text, val;\n    $dl.attr(\"class\", \"decidim_awesome-custom_fields\");\n    $dl.attr(\"data-generator\", \"decidim_awesome\");\n    $dl.attr(\"data-version\", window.DecidimAwesome.version);\n    for (key in data) {\n      // console.log(\"get the data!\", key, data[key]);\n      // Richtext plugin does not saves userdata, so we get it from the hidden input\n      if (data[key].type == \"textarea\" && data[key].subtype == \"richtext\") {\n        data[key].userData = [$(`#${data[key].name}-input`).val()];\n      }\n      if (data[key].userData && data[key].userData.length) {\n        $dt = $(\"<dt/>\");\n        $dt.text(data[key].label);\n        $dt.attr(\"name\", data[key].name);\n        $dd = $(\"<dd/>\");\n        // console.log(\"data for\", key, data[key].name, data[key])\n        for (val in data[key].userData) {\n          $div = $(\"<div/>\");\n          label = data[key].userData[val];\n          text = null;\n          if (data[key].values) {\n            l = data[key].values.find((v) => v.value == label);\n            if (l) {\n              text = label;\n              label = l.label;\n            }\n          } else if (data[key].type == \"date\" && label) {\n            l = new Date(label).toLocaleDateString();\n            if (l) {\n              text = label;\n              label = l;\n            }\n          }\n          // console.log(\"userData\", text, \"label\", label, 'key', key, 'data', data)\n          if (data[key].type == \"textarea\" && data[key].subtype == \"richtext\") {\n            $div.html(label);\n          } else {\n            $div.text(label);\n          }\n          if (text) {\n            $div.attr(\"alt\", text);\n          }\n          $dd.append($div);\n        }\n        $dd.attr(\"id\", data[key].name);\n        $dd.attr(\"name\", data[key].type);\n        $dl.append($dt);\n        $dl.append($dd);\n      }\n    }\n    return `<xml>${$dl[0].outerHTML}</xml>`;\n  }\n\n  fixBuggyFields() {\n    if (!this.$container) {\n      return false;\n    }\n\n    /**\n    * Hack to fix required checkboxes being reset\n    * Issue: https://github.com/Platoniq/decidim-module-decidim_awesome/issues/82\n    */\n    this.$container.find(\".formbuilder-checkbox-group\").each((_key, group) => {\n      const inputs = $(\".formbuilder-checkbox input\", group);\n      const data = this.spec.find((a) => a.type == \"checkbox-group\");\n      let values = data.userData;\n      if (!inputs.length || !data || !values) {\n        return;\n      }\n\n      inputs.each((_idx, input) => {\n        let index = values.indexOf(input.value);\n        if (index >= 0) {\n          values.splice(index, 1)\n          // setting checked=true do not makes the browser aware that the form is valid if the field is required\n          if (!input.checked)\n          {$(input).click();}\n        } else if (input.checked)\n        {$(input).click();}\n      });\n\n      // Fill \"other\" option\n      const other_option = $(\".other-option\", inputs.parent())[0];\n      const other_val = $(\".other-val\", inputs.parent())[0];\n      const other_text = values.join(\" \");\n\n      if (other_option) {\n        if (other_text) {\n          other_option.checked = true;\n          other_option.value = other_text;\n          other_val.value = other_text;\n        } else {\n          other_option.checked = false;\n          other_option.value = \"\";\n          other_val.value = \"\";\n        }\n      }\n    });\n\n    /**\n    * Hack to fix required radio buttons \"other\" value\n    * Issue: https://github.com/Platoniq/decidim-module-decidim_awesome/issues/133\n    */\n    this.$container.find(\".formbuilder-radio input.other-val\").on(\"input\", (input) => {\n      const $input = $(input.currentTarget);\n      const $group = $input.closest(\".formbuilder-radio-group\");\n      $group.find(\"input\").each((_key, radio) => {\n        const name = $(radio).attr(\"name\");\n        if (name && name.endsWith(\"[]\")) {\n          $(radio).attr(\"name\", name.slice(0, -2));\n        }\n      });\n    });\n  }\n\n  // Saves xml to the hidden input\n  storeData() {\n    if (!this.$container) {\n      return false;\n    }\n    const $form = this.$container.closest(\"form\");\n    const $body = $form.find(`input[name=\"${this.$element.data(\"name\")}\"]`);\n    if ($body.length && this.instance) {\n      this.spec = this.instance.userData;\n      $body.val(this.dataToXML(this.spec));\n      this.$element.data(\"spec\", this.spec);\n    }\n    // console.log(\"storeData spec\", this.spec, \"$body\", $body,\"$form\",$form,\"this\",this);\n  }\n\n  init($element) {\n    this.$element = $element;\n    this.spec = $element.data(\"spec\");\n    if (!this.$container) {\n      this.$container = $(this.container_selector);\n    }\n    // console.log(\"init\", $element, \"this\", this)\n    // always use the last field (in case of multilang tabs we only render one form due a limitation of the library to handle several instances)\n    this.instance = this.$container.formRender({\n      i18n: {\n        locale: this.lang,\n        location: \"https://cdn.jsdelivr.net/npm/formbuilder-languages@1.1.0/\"\n      },\n      formData: this.spec,\n      render: true\n    });\n    this.fixBuggyFields();\n  }\n}\n","/**\n * Decidim rich text editor control plugin\n * Renders standard Decidim WYSIWYG editor\n *\n * Registers Decidim Richtext as a subtype for the textarea control\n */\nimport {createQuillEditor} from \"src/decidim/decidim_awesome/editors/editor\"\n\n// configure the class for runtime loading\nif (!window.fbControls) {\n  window.fbControls = []\n}\nwindow.fbControls.push(function(controlClass, allControlClasses) {\n  const controlTextarea = allControlClasses.textarea\n\n  /**\n   * DecidimRichtext control class\n   *\n   * NOTE: I haven't found a way to set the userData value using this plugin\n   *       For this reason the value of the field must be collected manually\n   *       from the hidden input name same as the field with the suffix '-input'\n   */\n  class controlRichtext extends controlTextarea {\n\n    /**\n     * Class configuration - return the icons & label related to this control\n     * @returndefinition object\n     */\n    static get definition() {\n      return {\n        icon: \"📝\",\n        i18n: {\n          default: \"Rich Text Editor\"\n        }\n      }\n    }\n\n    /**\n     * configure the richtext editor requirements\n     */\n    configure() {\n      window.fbEditors.richtext = {};\n    }\n\n    /**\n     * build a div DOM element & convert to a richtext editor\n     * @return {DOMElement} DOM Element to be injected into the form.\n     */\n    build() {\n      const { value, userData, ...attrs } = this.config;\n\n      // hidden input for storing the current HTML value of the div\n      this.inputId = `${this.id}-input`;\n      // console.log(\"build plugin: this\",this)\n      this.input = this.markup(\"input\", null, {\n        name: name,\n        id: this.inputId,\n        type: \"hidden\",\n        value: (userData && userData[0]) || value || \"\"\n      });\n\n      const css = this.markup(\n        \"style\",\n        `\n        #${attrs.id} { height: auto; min-height: 6rem; padding-left: 0; padding-right: 0; }\n        #${attrs.id} div.ql-container { height: ${attrs.rows || 1}rem; }\n        #${attrs.id} p.help-text { margin-top: .5rem; }\n        `,\n        { type: \"text/css\" }\n      );\n      // console.log(\"build value\", value, \"userData\", userData, \"attrs\", attrs, attrs.id);\n      this.wrapper = this.markup(\"div\", null, attrs);\n      return this.markup(\"div\", [css, this.input, this.wrapper], attrs);\n    }\n\n    /**\n     * When the element is rendered into the DOM, execute the following code to initialise it\n     * @param {Object} evt - event\n     */\n    onRender(evt) {\n      // const value = this.config.value || '';\n      if (window.fbEditors.richtext[this.id]) {\n        // console.log(\"todo destroy\", window.fbEditors.richtext[this.id]);\n        // window.fbEditors.richtext[this.id].richtext('destroy')\n      }\n\n      window.fbEditors.quill[this.id] = {};\n      const editor = window.fbEditors.quill[this.id];\n      // createQuillEditor does all the job to update the hidden input wrapper\n      editor.instance = createQuillEditor(this.wrapper);\n      // editor.data = new Delta();\n      // if (value) {\n      //   editor.instance.setContents(window.JSON.parse(this.parsedHtml(value)));\n      // }\n      // editor.instance.on('text-change', function(delta) {\n      //   console.log(\"text-change\", \"delta\", delta, \"editor\", editor);\n      // //   // editor.data = editor.data.compose(delta);\n      // });\n\n      // console.log(\"render! editor\", editor, \"this\", this, \"value\", value);\n      return evt;\n    }\n  }\n\n  // register Decidim richtext as a richtext control\n  controlTextarea.register(\"richtext\", controlRichtext, \"textarea\");\n})\n","import CustomFieldsRenderer from \"src/decidim/decidim_awesome/forms/custom_fields_renderer\"\n\nwindow.DecidimAwesome.CustomFieldsRenderer = window.DecidimAwesome.CustomFieldsRenderer || new CustomFieldsRenderer();\n\n$(() => {\n  // use admin multilang specs if exists\n  let $el = $(\"proposal_custom_field:first\", \".tabs-title.is-active\");\n  $el = $el.length\n    ? $el\n    : $(\".proposal_custom_field:first\");\n  window.DecidimAwesome.CustomFieldsRenderer.init($el);\n\n  window.DecidimAwesome.CustomFieldsRenderer.$container.closest(\"form\").on(\"submit\", (e) => {\n    if (e.target.checkValidity()) {\n      // save current editor\n      window.DecidimAwesome.CustomFieldsRenderer.storeData();\n    } else {\n      e.preventDefault();\n      e.target.reportValidity();\n    }\n  });\n});\n"],"names":[],"sourceRoot":""}