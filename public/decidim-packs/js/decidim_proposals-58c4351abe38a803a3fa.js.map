{"version":3,"file":"js/decidim_proposals-58c4351abe38a803a3fa.js","mappings":"yCAAA,IAAIA,EAAM,CACT,gEAAiE,MACjE,iEAAkE,OAInE,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,O,sBCvBpB,IAAIH,EAAM,CACT,mFAAoF,MACpF,+EAAgF,MAChF,0EAA2E,MAC3E,4CAA6C,OAI9C,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,O,iBCvBpBY,GAAE,WACAA,EAAAA,gBAAAA,WAA4B,WAC1BA,EAAAA,MAAAA,KAAaA,EAAAA,MAAAA,KAAbA,eAGFA,EAAAA,gBAAAA,UAA2B,WACzBA,EAAAA,MAAAA,KAAaA,EAAAA,MAAAA,KAAbA,oB,orBCPAC,EAA2B,GAG/B,SAASX,EAAoBY,GAE5B,IAAIC,EAAeF,EAAyBC,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaJ,QAGrB,IAAID,EAASG,EAAyBC,GAAY,CAGjDH,QAAS,IAOV,OAHAM,EAAoBH,GAAUJ,EAAQA,EAAOC,QAAST,GAG/CQ,EAAOC,QCrBfT,EAAoBC,EAAI,SAASe,EAAKC,GAAQ,OAAOX,OAAOY,UAAUC,eAAeC,KAAKJ,EAAKC,ICA/FjB,EAAoBqB,EAAI,kB,iCCOT,SAASC,EAAuBC,EAAW,EAA3C,GACb,IAAMC,EAAG,YAAT,QACA,GAAIC,EAAJ,GACE,OAAOA,EAAP,GAGF,IAAMC,EAAYC,EAAAA,KAAlB,QACMC,EAAN,cACA,OAAIF,EAAAA,MAAJ,GACSA,EAAAA,QAAAA,EAAAA,IAAAA,OAAAA,EAAP,MAGKH,ECyCM,SAASM,EAAgBF,EAAO,EAAhC,GACb,IAAMG,EAAgBpB,EAAAA,OAAAA,GAAtB,GACMqB,EAAeJ,EAAAA,KAAAA,MAAAA,MAArB,KACAI,EAAAA,MAEA,IAAMC,EAAQ,UAAMD,EAAAA,KAApB,MAEIE,EAAJ,WACIC,EAAJ,YAEIP,EAAAA,OAAJ,IACEM,EAAeX,EAAuB,WAAW,EAAjDW,GACAC,EAAgBZ,EAAuB,YAAY,EAAnDY,IAGF,IAAMC,EAASzB,EAAA,OAAS,CACtB0B,WAAW,GAAD,SADY,aAEtBC,YAAY,GAAD,SAFW,cAGtBJ,aAHsB,EAItBC,cAAeA,GAJjB,GAMII,GAAJ,EAuBMC,EAAiB,SAACC,IArBO,WAC7B,IAAIC,EAAY/B,EAAE,IAAD,OAAKyB,EAAtB,aACIM,EAAAA,OAAJ,IACEA,EAAY/B,EAAE,8BAAD,OAA+ByB,EAA/B,8BAA2DA,EAA3D,WAAbM,SACAd,EAAAA,MAAAA,IAGF,IAAIe,EAAahC,EAAE,IAAD,OAAKyB,EAAvB,cACIO,EAAAA,OAAJ,IACEA,EAAahC,EAAE,8BAAD,OAA+ByB,EAA/B,+BAA4DA,EAA5D,YAAdO,SACAf,EAAAA,MAAAA,IAYFgB,GAEAjC,EAAE,IAAD,OAAKyB,EAANzB,aAAAA,IAA+B8B,EAA/B9B,IAAAA,KAAAA,QAA6D8B,EAA7D9B,IACAA,EAAE,IAAD,OAAKyB,EAANzB,cAAAA,IAAgC8B,EAAhC9B,IAAAA,KAAAA,QAA8D8B,EAA9D9B,KAUFiB,EAAAA,GAAAA,kBAA4B,WArB1B,IAIAjB,EAAE,IAAD,OAAKyB,EAANzB,aAAAA,IAAAA,IAAAA,WAAAA,SACAA,EAAE,IAAD,OAAKyB,EAANzB,cAAAA,IAAAA,IAAAA,WAAAA,aAsBFiB,EAAAA,GAAAA,wCAAkD,cAChDY,EAAAA,GACAD,GAAAA,EACAM,EAAAA,MAIF,IAAMJ,EAAc,UAAGb,EAAAA,KAAH,+BAApB,YACIkB,MAAAA,QAAAA,IAAJ,IAAkCL,EAAAA,QAChCD,EAAAA,GClIJ7B,GAAE,WACA,IAAMoC,EAAYpC,EAAlB,yCACMqC,EAAgBrC,EAAtB,kBACMsC,EAAqBtC,EAAE,QAA7B,GACMuC,EAAOvC,EAAb,gBACIwC,EAAJ,WACIC,EAAJ,YASA,GAPIH,EAAAA,OAAJ,IACEE,EAAe5B,EAAuB,WAAW,EAAjD4B,IACAC,EAAgB7B,EAAuB,YAAY,EAAnD6B,KAGFF,EAAAA,OAEIH,EAAAA,OAAJ,EAA0B,CACxB,IAAMM,EAAc,WACdN,EAAAA,GAAJ,SACEC,EAAAA,OACAC,EAAAA,KAAAA,YAAAA,KAEAD,EAAAA,OACAC,EAAAA,KAAAA,YAAAA,KAGJI,IACAN,EAAAA,GAAAA,SAAAA,GAGF,GAAIC,EAAAA,OAAJ,EAA8B,CACxBD,EAAAA,GAAJ,SACEG,EAAAA,OAGF,IAAMI,EAAO3C,EAAAA,sBAAAA,KAAb,kBACA2C,EAAAA,gBAAAA,eAAoC,YAClC3C,EAAE,eAAD,SAADA,OAAAA,IAAuC4C,EAAvC5C,KACAA,EAAE,eAAD,SAADA,OAAAA,IAAwC4C,EAAxC5C,QAGFmB,EAAgBmB,EAAmB,MAAO,YACxCC,EADyD,OAGzDI,EAAAA,eACAA,EAAAA,UAAe,CACbE,SAAUf,EADG,GAEbgB,UAAWhB,EAFE,GAGbiB,QAASV,EAAAA,eC9CjBW,EAAAA,OAGAA,EAAAA,O","sources":["webpack://app//Users/armandfardeau/.asdf/installs/ruby/2.7.1/lib/ruby/gems/2.7.0/bundler/gems/decidim-4f7e0ffd5b1e/decidim-proposals/app/packs/documents|sync|/^\\.\\/.*$/","webpack://app//Users/armandfardeau/.asdf/installs/ruby/2.7.1/lib/ruby/gems/2.7.0/bundler/gems/decidim-4f7e0ffd5b1e/decidim-proposals/app/packs/images|sync|/^\\.\\/.*$/","webpack://app/../../../.asdf/installs/ruby/2.7.1/lib/ruby/gems/2.7.0/bundler/gems/decidim-4f7e0ffd5b1e/decidim-proposals/app/packs/src/decidim/proposals/utils.js","webpack://app/webpack/bootstrap","webpack://app/webpack/runtime/hasOwnProperty shorthand","webpack://app/webpack/runtime/publicPath","webpack://app/../../../.asdf/installs/ruby/2.7.1/lib/ruby/gems/2.7.0/bundler/gems/decidim-4f7e0ffd5b1e/decidim-core/app/packs/src/decidim/geocoding/coordinate_input.js","webpack://app/../../../.asdf/installs/ruby/2.7.1/lib/ruby/gems/2.7.0/bundler/gems/decidim-4f7e0ffd5b1e/decidim-core/app/packs/src/decidim/geocoding/attach_input.js","webpack://app/../../../.asdf/installs/ruby/2.7.1/lib/ruby/gems/2.7.0/bundler/gems/decidim-4f7e0ffd5b1e/decidim-proposals/app/packs/src/decidim/proposals/add_proposal.js","webpack://app/../../../.asdf/installs/ruby/2.7.1/lib/ruby/gems/2.7.0/bundler/gems/decidim-4f7e0ffd5b1e/decidim-proposals/app/packs/entrypoints/decidim_proposals.js"],"sourcesContent":["var map = {\n\t\"./decidim/proposals/participatory_texts/participatory_text.md\": 27151,\n\t\"./decidim/proposals/participatory_texts/participatory_text.odt\": 45658\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 68582;","var map = {\n\t\"./decidim/gamification/badges/decidim_gamification_badges_accepted_proposals.svg\": 36493,\n\t\"./decidim/gamification/badges/decidim_gamification_badges_proposal_votes.svg\": 97206,\n\t\"./decidim/gamification/badges/decidim_gamification_badges_proposals.svg\": 19391,\n\t\"./decidim/proposals/decidim_proposals.svg\": 26503\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 19568;","/* eslint-disable no-invalid-this */\n\n$(() => {\n  $(\"#vote_button\").mouseover(function () {\n    $(this).text($(this).data(\"replace\"));\n  });\n\n  $(\"#vote_button\").mouseout(function () {\n    $(this).text($(this).data(\"original\"));\n  });\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/decidim-packs/\";","/**\n * Get coordinate input name from a given $input\n * @param {string} coordinate - Allows to find 'latitude' or 'longitude' field.\n * @param {jQuery} $input - Address input field\n * @param {Object} options (optional) - Extra options\n * @returns {string} - Returns input name\n */\nexport default function getCoordinateInputName(coordinate, $input, options) {\n  const key = `${coordinate}Name`;\n  if (options[key]) {\n    return options[key];\n  }\n\n  const inputName = $input.attr(\"name\");\n  const subNameMatch = /\\[[^\\]]+\\]$/;\n  if (inputName.match(subNameMatch)) {\n    return inputName.replace(subNameMatch, `[${coordinate}]`);\n  }\n\n  return coordinate;\n}\n","/* eslint-disable require-jsdoc */\nimport getCoordinateInputName from \"./coordinate_input\"\n\n/**\n * You can use this method to \"attach\" front-end geocoding to any forms in the\n * front-end which have address fields with geocoding autocompletion\n * functionality already applied to them.\n *\n * To learn more about the front-end geocoding autocompletion, please refer to\n * the maps documentation at: /docs/customization/maps.md.\n *\n * When the geocoding autocompletion finishes, most of the times, its results\n * will also contain the geocoordinate information for the selected address.\n * This method allows you to pass these coordinates (latitude and longitude)\n * to the same front-end form where the geocoding autocompletion address field\n * is located at (which is the $input you pass to this method). The latitude\n * and longitude coordinates will be added or \"attached\" to the form once the\n * user selects one of the suggested addresses.\n *\n * Therefore, if there was the following geocoding autocompletion field at\n * your form:\n *   <input\n *     id=\"record_address\"\n *     type=\"text\"\n *     name=\"record[address]\"\n *     data-decidim-geocoding=\"{&quot;url&quot;:&quot;https://photon.example.org/api/&quot;}\"\n *   />\n *\n * You would then \"attach\" the geocoding result coordinates to the same form\n * where this input is at as follows:\n *   $(document).ready(function() {\n *     window.Decidim.attachGeocoding($(\"#record_address\"));\n *   });\n *\n * Now, after the user selects one of the suggested geocoding autocompletion\n * addresses and the geocoding autocompletion API provides the coordinates in\n * the results, you would have the following fields automatically generated\n * to your form:\n *   <input id=\"record_address\" type=\"text\" name=\"record[address]\" value=\"Selected address, 00210, City\" ... />\n *   <input id=\"record_latitude\" type=\"hidden\" name=\"record[latitude]\" value=\"1.123\" />\n *   <input id=\"record_longitude\" type=\"hidden\" name=\"record[longitude]\" value=\"2.234\" />\n *\n * If you would not do the attachment, these hidden longitude and latitude\n * fields would not be generated and the geocoding would have to happen at the\n * server-side when the form is submitted. The problem with that approach\n * would be that the server-side address geocoding could potentially result in\n * different coordinates than what the user actually selected in the front-end\n * because the autocompletion API can return different coordinates than the\n * geocoding API. Another reason is to avoid unnecessary calls to the\n * geocoding API as the front-end geocoding suggestion already returned the\n * coordinate values we need.\n *\n * @param {jQuery} $input The input jQuery element for the geocoded address\n *   field.\n * @param {Object} options (optional) Extra options if you want to customize\n *   the latitude and longitude element IDs or names from the default.\n * @param {function} callback (optional) Callback to run when updating the coordinates values\n * @returns {void}\n */\n\nexport default function attachGeocoding($input, options, callback) {\n  const attachOptions = $.extend({}, options);\n  const inputIdParts = $input.attr(\"id\").split(\"_\");\n  inputIdParts.pop();\n\n  const idPrefix = `${inputIdParts.join(\"_\")}`;\n\n  let latitudeName = \"latitude\";\n  let longitudeName = \"longitude\";\n\n  if ($input.length > 0) {\n    latitudeName = getCoordinateInputName(\"latitude\", $input, attachOptions);\n    longitudeName = getCoordinateInputName(\"longitude\", $input, attachOptions);\n  }\n\n  const config = $.extend({\n    latitudeId: `${idPrefix}_latitude`,\n    longitudeId: `${idPrefix}_longitude`,\n    latitudeName: latitudeName,\n    longitudeName: longitudeName\n  }, options);\n  let geocoded = false;\n\n  const createCoordinateFields = () => {\n    let $latitude = $(`#${config.latitudeId}`);\n    if ($latitude.length < 1) {\n      $latitude = $(`<input type=\"hidden\" name=\"${config.latitudeName}\" id=\"${config.latitudeId}\" />`);\n      $input.after($latitude);\n    }\n\n    let $longitude = $(`#${config.longitudeId}`);\n    if ($longitude.length < 1) {\n      $longitude = $(`<input type=\"hidden\" name=\"${config.longitudeName}\" id=\"${config.longitudeId}\" />`);\n      $input.after($longitude);\n    }\n  }\n  const clearCoordinateFields = () => {\n    if (geocoded) {\n      return;\n    }\n\n    $(`#${config.latitudeId}`).val(\"\").removeAttr(\"value\");\n    $(`#${config.longitudeId}`).val(\"\").removeAttr(\"value\");\n  };\n  const setCoordinates = (coordinates) => {\n    createCoordinateFields();\n\n    $(`#${config.latitudeId}`).val(coordinates[0]).attr(\"value\", coordinates[0]);\n    $(`#${config.longitudeId}`).val(coordinates[1]).attr(\"value\", coordinates[1]);\n  }\n\n  // When the user changes the value of the coordinate field without selecting\n  // any of the geocoding autocomplete results, clear the current latitude and\n  // longitude values to let the backend do the geocoding. Once a geocoding\n  // autocomplete value has been selected, assume the user just wants to\n  // refine the address formatting without changing the location point value.\n  // If they want, they can still modify the point in the next step of the\n  // proposal creation/editing.\n  $input.on(\"change.decidim\", () => {\n    clearCoordinateFields();\n  });\n\n  // When we receive the geocoding event on the field, update the coordinate\n  // values.\n  $input.on(\"geocoder-suggest-coordinates.decidim\", (_ev, coordinates) => {\n    setCoordinates(coordinates);\n    geocoded = true;\n    callback(coordinates)\n  });\n\n  // Set the initial values if the field defines the coordinates\n  const coordinates = `${$input.data(\"coordinates\")}`.split(\",\").map(parseFloat);\n  if (Array.isArray(coordinates) && coordinates.length === 2) {\n    setCoordinates(coordinates);\n  }\n}\n","import attachGeocoding from \"src/decidim/geocoding/attach_input\"\nimport getCoordinateInputName from \"src/decidim/geocoding/coordinate_input\";\n\n$(() => {\n  const $checkbox = $(\"input:checkbox[name$='[has_address]']\");\n  const $addressInput = $(\"#address_input\");\n  const $addressInputField = $(\"input\", $addressInput);\n  const $map = $(\"#address_map\");\n  let latFieldName = \"latitude\";\n  let longFieldName = \"longitude\";\n\n  if ($addressInputField.length > 0) {\n    latFieldName = getCoordinateInputName(\"latitude\", $addressInputField, {})\n    longFieldName = getCoordinateInputName(\"longitude\", $addressInputField, {})\n  }\n\n  $map.hide();\n\n  if ($checkbox.length > 0) {\n    const toggleInput = () => {\n      if ($checkbox[0].checked) {\n        $addressInput.show();\n        $addressInputField.prop(\"disabled\", false);\n      } else {\n        $addressInput.hide();\n        $addressInputField.prop(\"disabled\", true);\n      }\n    }\n    toggleInput();\n    $checkbox.on(\"change\", toggleInput);\n  }\n\n  if ($addressInput.length > 0) {\n    if ($checkbox[0].checked) {\n      $map.show();\n    }\n\n    const ctrl = $(\"[data-decidim-map]\").data(\"map-controller\");\n    ctrl.setEventHandler(\"coordinates\", (ev) => {\n      $(`input[name='${latFieldName}']`).val(ev.lat);\n      $(`input[name='${longFieldName}']`).val(ev.lng);\n    });\n\n    attachGeocoding($addressInputField, null, (coordinates) => {\n      $map.show();\n      // Remove previous marker when user updates address in address field\n      ctrl.removeMarker();\n      ctrl.addMarker({\n        latitude: coordinates[0],\n        longitude: coordinates[1],\n        address: $addressInput.val()\n      });\n    });\n  }\n});\n","import \"src/decidim/proposals/utils\"\nimport \"src/decidim/proposals/add_proposal\"\n\n// Images\nrequire.context(\"../images\", true)\n\n// Documents\nrequire.context(\"../documents\", true)\n"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","$","__webpack_module_cache__","moduleId","cachedModule","undefined","__webpack_modules__","obj","prop","prototype","hasOwnProperty","call","p","getCoordinateInputName","coordinate","key","options","inputName","$input","subNameMatch","attachGeocoding","attachOptions","inputIdParts","idPrefix","latitudeName","longitudeName","config","latitudeId","longitudeId","geocoded","setCoordinates","coordinates","$latitude","$longitude","createCoordinateFields","callback","Array","$checkbox","$addressInput","$addressInputField","$map","latFieldName","longFieldName","toggleInput","ctrl","ev","latitude","longitude","address","require"],"sourceRoot":""}